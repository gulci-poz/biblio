# rypress.com/tutorials/git/index
# https://www.atlassian.com/git/tutorials/
# https://git-scm.com/book/en/v2

# śledzenie zdalnej gałęzi
# --set-upstream jest deprecated
git push -u github master

# dodaje do .gitignore
git rm --cached .idea -r
git rm --cached __pycache__ -r

# list zdalnych repozytoriów
git remote
# verbose
git remote -v

# pobranie zmian, bez wdrożenia na system plików, obie te rzeczy robi git pull
git fetch

# wyświetla gałęzie
git branch
# dla każdego błędu tworzymy nową gałąź

# przełączenie z utworzeniem nowej gałęzi (-b)
git checkout -b test1
# lub samo utworzenie gałęzi
git branch test1

# przejście do gałęzi
git checkout master

# push do nowej gałęzi - nowa gałąź zostanie utworzona w zdalnym repo
git push -u github test1
# w przypadku pull nowa gałąź jest tworzona lokalnie
git pull github test1
# przy checkout automatycznie zostanie ustawiony tracking

# w master mamy kod produkcyjny, nie powinno się z niego korzystać
# gałęzie są tworzone od aktywnej gałęzi

# jeśli użyjemy id issue, np. #1, to w liście issue będziemy mieli zaznaczone,
# że dany commit robił referencję do issue

# używamy git flow do ogarnięcia gałęzi
sudo apt-get install git-flow
git flow init

# możemy zrobić ręcznie merge
# jesteśmy na master
git merge test1
# jeśli nie ma konfliktów,
# to automatycznie kopiowane są commity z mergowanej gałęzi
# jeśli jest konflikt, to po wprowadzeniu poprawek robimy commit
# w przypadku pull request możemy mergować w githubie

# gałąź test1 pozostaje w repo, możemy dalej z niej korzystać

# kasowanie gałęzi
git branch -d <name>
# jeśli gałąź nie jest zmergowana, to musimy potwierdzić jej usunięcie
git branch -D <name>

# wypchnięcie wszystkich gałęzi
git push --all

==================================================

pip install "django==1.10.6"
pip install "django>=1.10,<1.11"
pip search django

w django mamy MTV - Model, Template, View
View wyciąga dane z Model
i przygotowuje do wyświetlania za pomocą wzorca Template
Template jest odpowiednikiem MVC.View
View analizuje ścieżkę URL

projekt jest nadrzędnym bytem (np. cała strona, witryna)
projekt to również aplikacja
jedna aplikacja - jedno zadanie; dużo małych aplikacji

sqlite3 db.sqlite3
.schema
pokazuje tebele dla sqlite

w momencie utworzenia klasy modelu mamy dostępny obiekt danych z jego metodami
migracji można nadać nazwę używając --name

jeśli mamy zmianę typu pola, to lepiej zrobić nowe pole z nowym typem
niż dawać nowy typ do istniejącego pola
koniecznie jeśli mamy zmianę typów relacyjnych,
np. ForeignKey na ManyToManyField,
mniej ważne przy zmianie danych numerycznych i tekstowych

makemigrations robi migrację schematu, w przypadku utworzenia nowego pola
i usunięcią starego (u nas usuwamy author, a tworzymy authors) musimy pamiętać
o migracji danych (produkcja)

django guardian - aplikacja do nadawania uprawnień do obiektów

dołączam model do widoku w views.py i zapisuję url do widoku w urls.py
w przypadku widoków generycznych widok przekazuje dane do szablonu
pod zmienną object_list lub object (detail)
grupę przekazanych do szablonu zmiennych nazywamy kontekstem
w przypadku widoków generycznych nazwa przekazanego z urla pola
musi być oznaczona pk lub slug (nie id)
funkcja .as_view() zwraca funkcję widoku

formularz jest domyślnie przekazywany do szablonu pod zmienną form
formularz jest domyślnie wyświetlany jako tabela
(za pomocą funkcji .as_table(), można też użyć .as_p();
w shellu robimy wywołanie funkcji, w szablonie piszemy tylko form.as_p)

auto_now_add - data będzie dodana przy tworzeniu obiektu,
nie będzie można jej zmienić, nawet w panelu admina
auto_now - data będzie zmieniana przy każdej zmianie modelu
default z datetime.now() - nadawanie tej samej daty
przy starcie aplikacji (modelu)
można użyć datetime.now - funkcja zostanie wykonana przy tworzeniu obiektu
trzeba użyć now z django - uwzględnia strefy czasowe

blank=True - informacja dla front-endu, że pole formularza nie jest wymagane
przeważnie idzie w parze z null=True
w przypadku CharField i TextField nie ustawiamy null=True, tylko blank=True,
wartość tekstowa jest zapisywana jako pusty string ''
null=True mogłoby być zinterpretowane jako druga wartość pola
zamiast tego używamy default=''

lokalizacja:
importujemy ugettext_lazy jako _
wersja lazy używa w miarę możliwości referencji do stringów z modelu
tłumaczenie pól modelu (używamy atrybutu verbose_name)
tłumaczenie tekstu do formatowania (nie samego formatowania)
tłumaczenie nazwy modelu (w class Meta)
musimy zrobić makemigrations i migrate
trzeba dodać LOCALE_PATHS do settings.py (tworzymy folder locale)
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

makemessages przechodzi całe drzewo projektu i wyciąga stringi do translacji,
tworzy lub uaktualnia plik message
musimy podać parametr -p pl
python manage.py makemessages -l pl
(lub django-admin makemessages)
dostajemy plik .po (Portable Object)

django-admin compilemessages
dostajemy plik .mo (top level locale)
plik binarny zoptymalizowany do użycia przez ugettext_lazy

aplikacje: poedit (sudo apt-get install pootle)
pootle (napisany w django, działa w py2, wymaga import pootle)

użycie shell:
from shelf.models import \
Author, Book, BookItem, BookEdition, BookCategory, Publisher
Author.objects.all()
autor = Author()
autor.first_name = "Mario"
autor.last_name = "Vargas Llosa"
autor.save()
autor.id
(autor.pk)
# jeśli obiekt nie jest zapisany w bazie, to nie ma id
a = Author(first_name = "Juliusz", last_name = "Verne")
a.id
a.save()
a.id
# obiekt został dodany do bazy, ale ma puste pola
# create zwraca obiekt
a2 = Author.objects.create()
a2.id
a2.first_name
# po usunięciu obiektu id pozostanie zajęte
a2.delete()
a2 = Author.objects.create(first_name = "Henryk", last_name = "Sienkiewicz")
# atrybut objects jest powiązany z managerem obiektów
# manager obiektów to sposób na dostanie się do bazy danych
# tutaj zostało wykonane zapytanie
Author.objects.all()
# tutaj nie
value = Author.objects.all()
type(value)
# dostajemy QuerySet, typ leniwy, pośrednik w dostępnie do bazy
# teraz dopiero poszło zapytanie do bazy
value.filter(last_name__contains="wicz")
# dodawanie autorów do ManyToMany
# nie możemy pod authors podstawić obiektu autora
book = Book.objects.create(title = "Język C")
ac1 = Author(first_name = "Brian", last_name = "Kernighan")
ac1.save()
ac2 = Author(first_name = "Dennis", last_name = "Ritchie")
ac2.save()
# mamy relację (ManyRelatedManager), która ma swoje metody
book.authors
# dowiadujemy, że mamy pustą listę
book.authors.all()
book.authors.add(ac1)
book.authors.add(ac2)
book.save()
book.authors.all()
# sprawdzenie - nowa sesja + import
# możemy używać indeksów
b = Book.objects.all()[0]
# nie możemy używać indeksów ujemnych
b = Book.objects.all().last()
b
b.authors.all()
b.authors.all()[0].id
Author.objects.all()[0].id
# ipython
# informacje o obiekcie
Author.objects?
# wyświetlenie kodu
UserAdmin??
# po kropce możemy rozwinąć dostępne metody
Author.objects.
qs = Author.objects.all()
a, created = qs.get_or_create(last_name="Crichton")
# reprezentacja obiektowa (JSON)
qs.values()
b=Book.objects.all()
qs=b.filter(authors__last_name__contains="ail")
# zapytanie SQL
print(qs.query)
a=Author.objects.filter(last_name__contains="ail")
qs=Book.objects.filter(authors__in=a)
# szukanie połączonych z autorem książek
# manager [book]_set jest tworzony dla obiektów,
# które są powiązane do (<-) naszych obiektów
# jeśli wiążemy kluczem obcym albo m2m do (->) obiektów,
# to używamy book.authors.all()
a=Author.objects.all().first()
a.book_set.all()

mamy tag {% debug %} - taki sam otwierający i zamykający

# po dodaniu related_name przestaje działać bookedition_set na rzecz editions
# przy definiowaniu related_name używamy liczby mnogiej
book = models.ForeignKey(Book, related_name='editions')

custom filter
chcemy mieć edition.date|pub_date zamiast edition.date|date:"Y"
w folderze aplikacji (shelf) tworzymy folder templatetags,
a w nim pusty plik __init__.py
zgodnie z konwencją (nie jest to konieczne) tworzymy plik shelf_tags.py
trzeba zrobić restart serwera, ponieważ zmiany w tagach nie są śledzone
śledzone są tylko pliki otwarte przy starcie aplikacji
w produkcji trzeba dobrze ustawić serwer wsgi, które zmiany ma śledzić

custom tag
w templates aplikacji tworzymy folder tags, tam będzie szablon html
w templatetags, w shelf_tags.py rejestrujemy funkcję definiującą tag

widoki służą do przygotowywania danych (kontekstu) dla szablonów
to samo możemy robić za pomocą tagów (widoki lite)

strona główna
w projekcie biblio definiuję widok oparty na klasie
(home był opraty na funkcji)
nie warto robić do strony głównej osobnej aplikacji, z obawy o niepotrzebny
rozrost i ponowne wykorzystanie aplikacji, co nie jest wskazane
w urls nie możemy podawać nazw widoków w cudzysłowie, musi być callable,
w praktyce jest to funkcja widoku
(w przypadku include musi być lista lub krotka)
dziedzicząc z View lub TemplateView można definiować funkcje get lub post
dla metod HTTP

do aplikacji auth można dołączyć swój model użytkownika
w settings.py trzeba ustawić zmienną AUTH_USER_MODEL
jeśli używamy klasy użytkownika jako klucza obcego, to musimy
zapewnić użycie określonej klasy użytkownika
robimy to przez wpisanie settings.AUTH_USER_MODEL zamiast User
dziedziczenie modelu jest rozbudowane o dodatkowy mechanizm,
każdy obiekt modelu ma osobną tabelę w DB,
jeśli stworzymy nowy model na bazie innego,
to zostaną stworzone obiekty (tabele) dla obu modeli,
dane będą składowane w dwóch tabelach,
dostaniemy relację one-to-one (klucz obcy do bazowej tabeli);
można stworzyć model abstrakcyjny z podklasą Meta
i atrybutem abstract = True,
wtedy tylko model dziedziczący będzie instancjonowany (jedna tabela),
nie będzie można stworzyć modelu z bazowej klasy
(django będzie pytać czy usunąć dane typów, do których wcześniej referowaliśmy,
trzeba wybrać nie; chodzi o typ User, musimy zrobić migrację danych)
mamy problem, ponieważ migracje aplikacji admin były zaaplikowane
przed migracjami dla nowego usera (mamy błąd InconsistentMigrationHistory)
usera trzeba zaprojektować na samym początku, żeby admin miał dobrą referencję
w django mogą się pojawiać regresje przy migracjach - są poprawiane
pomaga usunięcie bazy
django-allauth - aplikacja do zarządzania rejestracją użytkowników

# jeśli virtualenv ma dostęp do globalnych pakietów, a my chcemy tylko
# pakiety zainstalowane lokalnie
pip freeze --local

zamiast TEMPLATE_DEBUG w settings.py używamy klucza 'debug' w 'OPTIONS'
'debug' ustawiamy tylko wtedy jeśli chcemy mieć inną wartość niż wartość DEBUG

jeśli chcemy serwować za pomocą django pliki statyczne w produkcji
musimy do runserver użyć przełącznika --insecure
jeśli używamy django-configurations, to dodatkowo możemy użyć przełącznika
--configuration=Production
nie musimy wtedy ręcznie zmieniać Dev na Production w manage.py i wsgi.py

pliki media są dostępne w dev pod /static/ dzięki wpisowi do STATICFILES_DIRS
panel admin komponuje ścieżkę używając MEDIA_URL,
musimy taką ścieżkę zdefiniować w urlpatterns
poprzez danie do tablicy zwrotu z funkcji pomocniczej static,
jest to ścieżka do MEDIA_ROOT
ścieżka musi być lokalna i nie działa w produkcji

możemy serwować pliki media jako pliki statyczne w produkcji
musimy dodać media do STATICFILES_DIRS i zdefiniować MEDIA_URL dla produkcji
musi być też wykonany collectstatic
panel admina używa MEDIA_URL, a w produkcji definiujemy osobne MEDIA_URL,
więc nie są konieczne zmiany w konfiguracji urli

pokazanie i zakończenie procesu na danym porcie
fuser 8000/tcp
fuser 8000/tcp -k

podmiana templates dla aplikacji allauth
w głównym folderze templates projektu dodajemy folder account
możemy ten folder dodać w templates dowolnej aplikacji,
ale wtedy musi być ona w settings.py w INSTALLED_APPS powyżej allauth
oryginalny folder mamy w site-packages/allauth/templates
tworzymy wybrany plik szablonu, np. login.html, zastąpi on oryginalny szablon

as_view() zwraca funkcję
jeśli użyjemy as_view i dekoratora login_required (który też da nam funkcję)
ProtectedAuthorListView = login_required(AuthorListView.as_view())
to ProtectedAuthorListView nie możemy użyć jako klasy bazowej
dla nowej klasy widoku
musimy użyć method_decorator i funkcji dispatch()

przed django 1.9 nie mogliśmy dekorować klasy za pomocą method_decorator
trzeba było nadpisać metodę dispatch()
teraz dekorujemy klasę AuthorListView i nie nadpisujemy metody dispatch()
w urls.py dekorujemy dany widok za pomocą login_required
istnieje też permission_required

from users.models import BiblioUser
user = BiblioUser.objects.all()[0]
user.user_permissions.all()

from django.contrib.auth.models import Permission
# szukanie atrybutów obiektu
p=Permission.objects.all().last()
p.codename
p.name
p.content_type
p.content_type_id
Permission.objects.filter(codename='can_rent')[0]
Permission.objects.filter(name='Can rent a book')[0]

# get() zwróci ilość, jeśli jest więcej niż jeden obiekt
p=Permission.objects.get(codename='can_rent')
# dodanie uprawnienia użytkownikowi
user.user_permissions.add(p)
# nie jest konieczne, gdyż add dodaje wpis do tabeli pośredniej m2m
user.save()
